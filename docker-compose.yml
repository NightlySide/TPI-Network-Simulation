version: "3.1"

## specify all services you need, each service is one container which will be run
services:
    ## service name, NOT the name of the container (that gets assigned automatically)
    ## DO NOT use container_name field to manually specify container name, when scaling to more than one container, that will result in an error
    
    ## === ZUI ===
    poste-utilisateur:
        ## image from which the conatiner should be built, equals to FROM in Dockerfile
        # this image is based on mysql docker image and it already contains a dump from BEST database
        build: ./poste_utilisateur/
        tty: true
        stdin_open: true
        ## restart on crash
        restart: always
        ## pass environment variables
        #environment:
        #    - MYSQL_ROOT_PASSWORD=example
        ports:
            # host:container
            - "2221:22"
        networks: 
            zui:
                ipv4_address: 10.10.3.2
    
    ## === INTERNET ===
    kali:
        ## image from which the conatiner should be built, equals to FROM in Dockerfile
        # this image is based on mysql docker image and it already contains a dump from BEST database
        build: ./poste_externe_kali/
        tty: true
        stdin_open: true
        ## restart on crash
        restart: always
        ## pass environment variables
        #environment:
        #    - MYSQL_ROOT_PASSWORD=example
        ports:
            # host:container
            - "2222:22"
        networks: 
            frontend:
                ipv4_address: 10.10.0.2

    ## === FW ===
    firewall:
        ## image from which the conatiner should be built, equals to FROM in Dockerfile
        # this image is based on mysql docker image and it already contains a dump from BEST database
        build: ./firewall/
        tty: true
        stdin_open: true
        ## restart on crash
        restart: always
        ## pass environment variables
        #environment:
        #    - MYSQL_ROOT_PASSWORD=example
        ports:
            # host:container
            - "2223:22"
        networks: 
            fw:
                ipv4_address: 10.10.1.254

    ## === DMZ ===
    apache:
        build: ./serveur_dmz/web/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "8080:80"
        networks: 
            dmz:
                ipv4_address: 10.10.2.2

    dns:
        build: ./serveur_dmz/dns/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "5353:53"
        networks: 
            dmz:
                ipv4_address: 10.10.2.3
    
    syslog:
        build: ./serveur_dmz/syslog-ng/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "514:514/udp"
            - "601:601/tcp"
        networks: 
            dmz:
                ipv4_address: 10.10.2.4

    ossec:
        build: ./serveur_dmz/ossec/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "1514:1514/udp"
            - "1515:1515/tcp"
        networks: 
            dmz:
                ipv4_address: 10.10.2.5

networks: 
    frontend:
        driver: bridge
        ipam: 
            driver: default
            config: 
                - subnet: "10.10.0.0/24"
    fw:
        ipam:
            driver: default
            config:
                - subnet: "10.10.1.0/24"
    dmz:
        driver: bridge
        ipam: 
            driver: default
            config:
                - subnet: "10.10.2.0/24"
    zui:
        ipam:
            driver: default
            config: 
                - subnet: "10.10.3.0/24"