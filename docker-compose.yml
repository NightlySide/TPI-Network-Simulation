version: "3.1"

## specify all services you need, each service is one container which will be run
services:
    ## service name, NOT the name of the container (that gets assigned automatically)
    ## DO NOT use container_name field to manually specify container name, when scaling to more than one container, that will result in an error
    
    ## === ZUI ===
    poste-utilisateur:
        ## image from which the conatiner should be built, equals to FROM in Dockerfile
        # this image is based on mysql docker image and it already contains a dump from BEST database
        build: ./docker/poste_utilisateur/
        tty: true
        stdin_open: true
        ## restart on crash
        restart: always
        ## pass environment variables
        #environment:
        #    - MYSQL_ROOT_PASSWORD=example
        ports:
            # host:container
            - "2221:22"
        networks: 
            vlan-zui:
                ipv4_address: 10.10.3.2
            
    
    ## === INTERNET ===
    kali:
        ## image from which the conatiner should be built, equals to FROM in Dockerfile
        # this image is based on mysql docker image and it already contains a dump from BEST database
        build: ./docker/poste_externe_kali/
        tty: true
        stdin_open: true
        ## restart on crash
        restart: always
        ## pass environment variables
        #environment:
        #    - MYSQL_ROOT_PASSWORD=example
        ports:
            # host:container
            - "2222:22"
        networks: 
            frontend:
                ipv4_address: 10.10.0.2

    ## === FW ===
    whoami:
        image: "traefik/whoami"
        container_name: "simple-service"
        labels:
            - traefik.enable=true
            - traefik.frontend.rule=PathPrefixStrip:/testpath
            - traefil.docker.network=vlan-fw
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.6

    traefik:
        image: "traefik:latest"
        tty: true
        stdin_open: true
        restart: always
        ports:
            - "80:80"
            - "8080:8080"
        links:
            - dns
        depends_on: 
            - apache
            - dns
        environment: 
            - TZ="America/Denver"
        volumes: 
            - /var/run/docker.sock:/var/run/docker.sock
            - ./docker/firewall/traefik.yml:/etc/traefik/traefik.yml
        deploy:
            placement:
                constraints:
                    - node.role == manager
            labels:
                - traefil.docker.network=vlan-fw
                - traefik.http.services.traefik.loadbalancer.server.port=8080
        networks: 
            vlan-fw:
                ipv4_address: 10.10.1.254
            frontend:
                ipv4_address: 10.10.0.42
            vlan-zui:
                ipv4_address: 10.10.3.42
            vlan-dmz:
                ipv4_address: 10.10.2.42

    # vyos:
    #     image: 2stacks/vyos
    #     tty: true
    #     stdin_open: true
    #     restart: always
    #     privileged: true
    #     container_name: vyos
    #     cap_add:
    #         - NET_ADMIN
    #     devices:
    #         - /dev/net/tun
    #     volumes:
    #         - "/lib/modules:/lib/modules:ro" 
    #         - "./docker/firewall/vyos_data/config.init:/config.init"
    #     entrypoint:
    #         - /sbin/init
    #     networks: 
    #         vlan-fw:
    #             ipv4_address: 10.10.1.254
    #         frontend:
    #             ipv4_address: 10.10.0.42
    #         vlan-zui:
    #             ipv4_address: 10.10.3.42
    #         vlan-dmz:
    #             ipv4_address: 10.10.2.42

    ## === DMZ ===
    apache:
        build: ./docker/serveur_dmz/web/
        tty: true
        stdin_open: true
        restart: always
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.2
        ports:
            - "8081:8081"
        labels:
            - "traefik.enable=true"
            - traefil.docker.network=vlan-fw
            - "traefik.http.routers.apache.entrypoints=web"
            - "traefik.port=8081"

    dns:
        build: ./docker/serveur_dmz/dns/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "53:53"
            - "10000:10000"
        volumes: 
            - /srv/docker/bind:/serveur_dmz/dns/data
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.3
    
    syslog:
        build: ./docker/serveur_dmz/syslog-ng/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "514:514/udp"
            - "601:601/tcp"
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.4

    ossec:
        build: ./docker/serveur_dmz/ossec/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "1514:1514/udp"
            - "1515:1515/tcp"
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.5

networks: 
    frontend:
        driver: bridge
        ipam: 
            driver: default
            config: 
                - subnet: "10.10.0.0/24"
    
    vlan-fw:
        driver: macvlan
        ipam:
            config:
                - subnet: "10.10.1.0/24"
                
    vlan-dmz:
        driver: macvlan
        ipam: 
            config:
                - subnet: "10.10.2.0/24"

    vlan-zui:
        driver: macvlan
        ipam:
            config: 
                - subnet: "10.10.3.0/24"
    
    