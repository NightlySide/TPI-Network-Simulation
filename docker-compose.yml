version: "3.1"

## specify all services you need, each service is one container which will be run
services:
    ## service name, NOT the name of the container (that gets assigned automatically)
    ## DO NOT use container_name field to manually specify container name, when scaling to more than one container, that will result in an error
    
    ## === ZUI ===
    poste-utilisateur-patron:
        ## image from which the conatiner should be built, equals to FROM in Dockerfile
        # this image is based on mysql docker image and it already contains a dump from BEST database
        build: ./docker/poste_utilisateur/patron/
        tty: true
        stdin_open: true
        ## restart on crash
        restart: always
        ## pass environment variables
        #environment:
        #    - MYSQL_ROOT_PASSWORD=example
        ports:
            # host:container
            - "2221:22"
        networks: 
            vlan-zui:
                ipv4_address: 10.10.3.2
    
    post-utilisateur-bob:
        build: ./docker/poste_utilisateur/bob/
        tty: true
        stdin_open: true
        restart: always
        ports:
            - "22:22"
        networks: 
            vlan-zui:
                ipv4_address: 10.10.3.3

    post-utilisateur-alice:
        build: ./docker/poste_utilisateur/alice/
        tty: true
        stdin_open: true
        restart: always
        ports:
            - "22:22"
        networks: 
            vlan-zui:
                ipv4_address: 10.10.3.4
            
    
    ## === INTERNET ===
    kali:
        ## image from which the conatiner should be built, equals to FROM in Dockerfile
        # this image is based on mysql docker image and it already contains a dump from BEST database
        build: ./docker/poste_externe_kali/
        tty: true
        stdin_open: true
        ## restart on crash
        restart: always
        ## pass environment variables
        #environment:
        #    - MYSQL_ROOT_PASSWORD=example
        ports:
            # host:container
            - "2222:22"
        networks: 
            frontend:
                ipv4_address: 10.10.0.2

    ## === FW ===
    whoami:
        image: "traefik/whoami"
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.whoami.rule=PathPrefix(`/whoami`)'
            - 'traefik.http.services.whoami.loadbalancer.server.port=80'
            - 'traefik.http.routers.whoami.entrypoints=web'
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.6

    traefik:
        build: ./docker/firewall/traefik/
        tty: true
        stdin_open: true
        restart: always
        ports:
            - "80:80"
            - "8080:8080"
        links:
            - dns
        depends_on: 
            - apache
            - dns
            - whoami
        environment: 
            - TZ="America/Denver"
        volumes: 
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./docker/firewall/traefik/traefik.toml:/traefik.toml
        deploy:
            placement:
                constraints:
                    - node.role == manager
        networks: 
            vlan-fw:
                ipv4_address: 10.10.1.254
            frontend:
                ipv4_address: 10.10.0.42
            vlan-zui:
                ipv4_address: 10.10.3.42
            vlan-dmz:
                ipv4_address: 10.10.2.42

    suricata:
        build: ./docker/firewall/suricata/
        tty: true
        stdin_open: true
        restart: always
        networks: 
            vlan-fw:
                ipv4_address: 10.10.1.250
        cap_add:
            - NET_ADMIN
            - SYS_ADMIN
        volumes:
            - ./docker/firewall/suricata/suricata_log:/var/log/suricata
            - ./docker/firewall/suricata/suricata.rules:/var/lib/suricata/rules/suricata.rules
            - ./docker/firewall/suricata/suricata.yaml:/etc/suricata/suricata.yaml
    
    elasticsearch:
        build: ./docker/firewall/elasticsearch/
        tty: true
        stdin_open: true
        restart: always
        environment:
            - discovery.type=single-node
        ulimits:
            memlock:
                soft: -1
                hard: -1
        networks: 
            vlan-fw:
                ipv4_address: 10.10.1.249
        ports:
            - "9200:9200"
        volumes:
            - ./docker/firewall/suricata/suricata_log/:/usr/share/elasticsearch/data/
    
    kibana:
        build: ./docker/firewall/kibana/
        tty: true
        stdin_open: true
        restart: always
        networks: 
            vlan-fw:
                ipv4_address: 10.10.1.248
        depends_on: 
            - elasticsearch
        ports:
            - "5601:5601"
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.kibana.rule=PathPrefix(`/`)'
            - 'traefik.http.services.kibana.loadbalancer.server.port=5601'
            - 'traefik.http.routers.kibana.entrypoints=kibana'
        volumes: 
            - ./docker/firewall/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

    logstash:
        build: './docker/firewall/logstash/'
        depends_on:
            - elasticsearch
            - suricata
        ports:
            - '9600:9600'
        volumes:
            - './docker/firewall/suricata/suricata_log/eve.json:/var/log/eve.json'
            - './docker/firewall/elasticsearch/to_elastic.conf:/usr/share/logstash/pipeline/logstash.conf'
            - './docker/firewall/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml'
        networks:
            vlan-fw:
                ipv4_address: 10.10.1.247
        
    ## === DMZ ===
    apache:
        build: ./docker/serveur_dmz/web/
        tty: true
        stdin_open: true
        restart: always
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.2
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.apache.rule=PathPrefix(`/`)'
            - 'traefik.http.services.apache.loadbalancer.server.port=80'
            - 'traefik.http.routers.apache.entrypoints=web'

    dns:
        build: ./docker/serveur_dmz/dns/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "53:53"
            - "10000:10000"
        volumes: 
            - /srv/docker/bind:/serveur_dmz/dns/data
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.3
        labels:
            - 'traefik.enable=true'

            - 'traefik.http.routers.dns-webmin.rule=PathPrefix(`/`)'
            - 'traefik.http.services.dns-webmin.loadbalancer.server.port=10000'
            - 'traefik.http.routers.dns-webmin.entrypoints=webmin'
            - 'traefik.http.routers.dns-webmin.service=dns'

            - 'traefik.http.routers.dns.rule=PathPrefix(`/`)'
            - 'traefik.http.services.dns.loadbalancer.server.port=53'
            - 'traefik.http.routers.dns.entrypoints=dns'
            - 'traefik.http.routers.dns.service=dns'

    syslog:
        build: ./docker/serveur_dmz/syslog-ng/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "514:514/udp"
            - "601:601/tcp"
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.4

    ossec:
        build: ./docker/serveur_dmz/ossec/
        tty: true
        stdin_open: true
        restart: always
        ports: 
            - "1514:1514/udp"
            - "1515:1515/tcp"
        networks: 
            vlan-dmz:
                ipv4_address: 10.10.2.5

networks: 
    frontend:
        driver: bridge
        ipam: 
            driver: default
            config: 
                - subnet: "10.10.0.0/24"
    
    vlan-fw:
        driver: macvlan
        ipam:
            config:
                - subnet: "10.10.1.0/24"
                
    vlan-dmz:
        driver: macvlan
        ipam: 
            config:
                - subnet: "10.10.2.0/24"

    vlan-zui:
        driver: macvlan
        ipam:
            config: 
                - subnet: "10.10.3.0/24"
    
    